create schema if not exists user_authors;


create table if not exists user_authors.author (
	author_id int4 not null unique generated by default as identity,
	author_link text not null unique,
	author_last_article_link text
);

create table if not exists user_authors.telegram_user (
	user_id int8 not null unique generated by default as identity,
	chat_id int8 not null unique
);

create table if not exists user_authors.user_author (
	user_authors_id int4 not null unique generated by default as identity,
	author_id int4 not null references user_authors.author(author_id),
	user_id int4 not null references user_authors.telegram_user(user_id),
	
	unique(author_id, user_id)
);


create or replace function user_authors.add_author_f(p_chat_id int8, p_author_link text) 
	returns int4
	security definer 
	language plpgsql
as $function$
declare
	l_user_id int4;
	l_author_id int4;
	l_insert_count int4;
begin 
	insert into user_authors.author(author_link)
	values(p_author_link)
	on conflict do nothing;
	
	insert into user_authors.telegram_user(chat_id)
	values(p_chat_id)
	on conflict do nothing;

	select user_id 
	into l_user_id
	from user_authors.telegram_user
	where chat_id = p_chat_id;

	select author_id 
	into l_author_id
	from user_authors.author
	where author_link = p_author_link;

	insert into user_authors.user_author(author_id, user_id)
	values(l_author_id, l_user_id)
	on conflict do nothing
	returning * into l_insert_count;

	return coalesce(l_insert_count, 0);
end;
$function$;


create or replace function user_authors.delete_author_f(p_chat_id int8, p_author_link text) 
	returns int4
	security definer 
	language plpgsql
as $function$
declare
	l_user_id int4;
	l_author_id int4;
	l_delete_count int4 = 0;
begin 
	select user_id 
	into l_user_id
	from user_authors.telegram_user
	where chat_id = p_chat_id;

	select author_id 
	into l_author_id
	from user_authors.author
	where author_link = p_author_link;

	delete from user_authors.user_author
	where user_id = l_user_id
	and   author_id = l_author_id
	returning * into l_delete_count;

	return coalesce(l_delete_count, 0);
end;
$function$;


create or replace function user_authors.authors_users_f() 
	returns table(
		chat_id int8,
		author_link text,
		author_last_article_link text
	)
	security definer 
	language plpgsql
as $function$
begin 
	return query
	select tu.chat_id, c.author_link, c.author_last_article_link from user_authors.user_author cu
	join user_authors.author c on c.author_id = cu.author_id
	join user_authors.telegram_user tu on tu.user_id = cu.user_id;
end;
$function$;

create or replace function user_authors.author_add_last_article_f(p_author_link text, p_last_article_link text) 
	returns void
	security definer 
	language plpgsql
as $function$
begin 
	update user_authors.author
	set author_last_article_link = p_last_article_link
	where author_link = p_author_link;
end;
$function$;

create or replace function user_authors.get_list_authors_f(p_chat_id int8) 
	RETURNS TABLE(
		author_link text
	)
	SECURITY DEFINER
	LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN query
	SELECT a.author_link
	FROM user_authors.user_author au
	JOIN user_authors.telegram_user tu ON tu.user_id = au.user_id
	JOIN user_authors.author a ON a.author_id = au.author_id 
	WHERE tu.chat_id = p_chat_id;
END;
$function$;